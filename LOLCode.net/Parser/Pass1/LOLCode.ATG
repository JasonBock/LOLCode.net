using System.Collections.Generic;
using System.Reflection.Emit;

COMPILER LOLCode

CHARACTERS
	tab					= '\u0009'.
	eol					= '\u000a'.
	noteol				= ANY - eol.
	cr					= '\u000d'.
	newLine				= cr + eol.
	
	startLetter			= 'A' .. 'Z' + 'a' .. 'z' + '_'.
	partLetter			= '0' .. '9' + 'A' .. 'Z' + 'a' .. 'z' + '_'.
	
	digit				= "0123456789".
	hexDigit			= digit + "ABCDEFabcdef".	
	notDigit			= ANY - digit.
	
	regularStringChar	= ANY - '"' - '\\' - newLine.
	ws					= " " + tab + '\u000b' + '\u000c'.

	notTLDR				= ANY - 'T' - 'L' - 'D' - 'R'.
	
TOKENS
	ident				= startLetter { partLetter }.
	intCon				= digit { digit }.
	realCon				= "." digit {digit} 
						  [("e" | "E") ["+" | "-"] digit {digit}] 
						| digit {digit} 
						  ( "." digit {digit} 
						    [("e" | "E" ) ["+" | "-"] digit {digit} ] 
						    | ("e" | "E") ["+" | "-"] digit {digit}
						  ).
	stringCon			= "\""  { regularStringChar
							| ":)" | ":>" | ":o" | ":\"" | "::"
							| ":(" hexDigit [hexDigit] [hexDigit] [hexDigit] ")"
							| ":{" startLetter { partLetter } "}"
							| ":[" regularStringChar { regularStringChar } "]"
							} "\"".
	eos					= eol | "." | ",".
	
PRAGMAS
	comment				= "BTW" { noteol } CONTEXT (eol).
	blockcomment		= "OBTW" ws { 'L' | 'D' | 'R' | notTLDR | 'T' ( 'T' | 'D' | 'R' | notTLDR | 'L' ( 'T' | 'L' | 'R' | notTLDR | 'D' ( 'T' | 'L' | 'D' | notTLDR ) ) ) } 'T' 'L' 'D' 'R'.
	continuation		= ( "..." | "\u2026" ) { noteol } eol.
IGNORE tab + cr

PRODUCTIONS
LOLCode
=
	"HAI" [ "TO" ("1.0"								(. version = LOLCodeVersion.v1_0; .)
	| "IRCSPECZ"									(. version = LOLCodeVersion.IRCSPECZ; .)
	| "1.1"											(. version = LOLCodeVersion.v1_1; .)
	| "1.2"											(. version = LOLCodeVersion.v1_2; .)
	) ] { eos }
	Statements
	"KTHXBYE" { eos }
.

Statements
=
	{ (FunctionDeclaration
	| VarDecl
	| OtherStatement) eos {eos} }
.

FunctionDeclaration
=													(. int arity = 0; string name; .)
	"HOW" "DUZ" "I" ident							(. name = t.val; .)
	[ "YR" ident									(. arity++; .)
	{ "AN" "YR" ident								(. arity++; .)
	} ] { eos }
	{ (VarDecl | OtherStatement) eos {eos} }
	"IF" "U" "SAY" "SO"								(. globals.AddSymbol(new UserFunctionRef(name, arity, false)); .)
.

VarDecl
=
	"I" "HAS" "A" ident								/*(. globals.AddSymbol(new GlobalRef(t.val)); .)*/
	[ "ITZ" OtherStatement ]
.

OtherStatement
=
	(ident | intCon | realCon | stringCon | Keyword) {ident | intCon | realCon | stringCon | Keyword}
.

Keyword
=
	"CAN"			| "HAS"			| "?"			| "GIMMEH"
	| "LINE"		| "WORD"		| "LETTAR"		| "GTFO" 
	| "ENUF"		| "OV"			| "YR"			| "UR"
	| "MOAR"		| "A"			| "ITZ"			| "AN"
	| "IM"			| "IN"			| "KTHX"		| "OUTTA"
	| "UPZ"			| "NERFZ"		| "TIEMZD"		| "OVARZ"
	| "!!"			| "IZ"			| "YARLY"		| "MEBBE"
	| "NOWAI"		| "WTF"			| "OMG"			| "OMGWTF"
	| "BYES"		| "DIAF"		| "VISIBLE"		| "INVISIBLE"
	| "!"			| "LOL"			| "R"			| "AND"
	| "XOR"			| "OR"			| "NOT"			| "BIGR"
	| "THAN"		| "SMALR"		| "LIEK"		| "UP"
	| "NERF"		| "TIEMZ"		| "OVAR"		| "NOOB"
	| "MAH"			| "OF"			| "MAEK"		| "IS"
	| "NOW"			| "FOUND"
.

END LOLCode.